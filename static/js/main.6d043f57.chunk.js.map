{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","get_random_card","ctx","random","Shuffle","Players","战士","hp","i","j","skills","name","desc","effect","G","card","damage","includes","bossHP","hand","push","民兵","治疗兵","cured_player","Object","keys","players","lowest_hp","p","console","log","exhausted","见习法师","judge","刺客","PokerDungeons","setup","messages","moves","useSkill","cardIndex","playerIndex","skillIndex","unshift","splice","turn","onEnd","alert","actions","pop","boss_move","BossBoard","className","style","color","this","props","React","Component","PlayerCell","player","undefined","borderColor","onClick","contents","skill","Controller","state","current_branch","previous_branch","action","set_branch","bind","branch","setState","map","idx","src","height","execute","Board","tbody","cells","Math","min","length","events","endTurn","App","Client","game","numPlayers","board","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d043f57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Client } from 'boardgame.io/react';\nimport { PluginPlayer } from 'boardgame.io/plugins'\n\nvar SUIT_IMGS = [];\n\nfunction get_random_card(ctx){\n  let cards = [2,3,4,5,6,7,8,9,\"T\",\"J\",\"Q\",\"K\",\"A\"];\n  let suits = [\"c\", \"d\", \"h\", \"s\"];\n  return [ctx.random.Shuffle(cards)[0], ctx.random.Shuffle(suits)[0]];\n}\n\nfunction boss_move(G, ctx){\n  let actions = [\n  // Single damage\n  (G,ctx) => {\n    G.players[ctx.random.Shuffle(Object.keys(G.players))[0]].hp -= 6;\n    G.messages.unshift(\"Boss对一名队友造成了6点伤害\");\n  },\n  // AOE\n  (G,ctx) => {\n    for (let p in G.players) G.players[p].hp -= 3;\n    G.messages.unshift(\"Boss对每名队友造成了3点伤害\");\n  },\n  // Drop cards\n  (G,ctx) => {\n    for (let i=0;i<2;i++) G.hand.pop();\n    G.messages.unshift(\"Boss弃掉了你2张牌\");\n  },\n  // Exhaust\n  (G,ctx) => {\n    for (let i=0;i<2;i++) G.players[ctx.random.Shuffle(Object.keys(G.players))[0]].exhausted=true;\n    G.messages.unshift(\"Boss横置了2名队友\");\n  }\n  ];\n\n  ctx.random.Shuffle(actions)[0](G, ctx);\n  if(G.bossHP <= 30){\n    ctx.random.Shuffle(actions)[0](G, ctx);\n\n  }\n}\n\n// Warrior, Militia, Medic, Mage, Assassin\n\nconst Players = {\n  战士: {\n    hp: 15,\n    i: 0,\n    j: 1,\n    skills:[\n      {\n        name: \"普通攻击\",\n        desc: \"造成2点伤害，如果使用的是高牌，则伤害+2\",\n        effect(G, ctx, card){\n          let damage = 2;\n          if ([\"J\", \"Q\", \"K\", \"A\"].includes(card[0])){\n            damage += 2;\n          }\n          G.bossHP -= damage;\n        }\n      },\n      {\n        name: \"力量召唤\",\n        desc: \"检索1张高牌\",\n        effect(G, ctx, card){\n          G.hand.push([ctx.random.Shuffle([\"J\", \"Q\", \"K\", \"A\"])[0], ctx.random.Shuffle([\"c\", \"d\", \"h\", \"s\"])[0]]);\n        }\n      }\n    ]\n\n  },\n  民兵: {\n    hp: 12,\n    i: 1,\n    j: 0,\n    skills:[\n      {\n        name: \"普通攻击\",\n        desc: \"造成2点伤害，如果使用的是高牌，则伤害+2\",\n        effect(G, ctx, card){\n          let damage = 2;\n          if ([\"J\", \"Q\", \"K\", \"A\"].includes(card[0])){\n            damage += 2;\n          }\n          G.bossHP -= damage;\n        }\n      },\n      {\n        name: \"鼓舞\",\n        desc: \"(限草花和方片)摸2张牌\",\n        effect(G, ctx, card){\n          if ([\"c\", \"d\"].includes(card[1])){\n            for (let i=0; i<2; i++) G.hand.push(get_random_card(ctx));\n          }\n        }\n      }\n    ],\n\n  },\n  治疗兵: {\n    hp: 10,\n    i: 1,\n    j: 2,\n    skills: [\n      {\n        name: \"治疗\",\n        desc: \"治疗血量最低的队友3点血量\",\n        effect(G, ctx, card){\n          let cured_player = Object.keys(G.players)[0]; // TODO: change this\n          let lowest_hp = 1000;\n          for (let p of ctx.random.Shuffle(Object.keys(G.players))){\n            console.log(p);\n            console.log(\"Debug player hp\", G.players[p]);\n            if (G.players[p].hp < lowest_hp){\n              lowest_hp = G.players[p].hp;\n              cured_player = p;\n            }\n            \n          }\n\n          G.players[cured_player].hp += 3;\n        }\n      },\n      {\n        name: \"兴奋剂\",\n        desc: \"重置1个队友\",\n        effect(G, ctx, card){\n          for (let p of ctx.random.Shuffle(Object.keys(G.players))){\n            if (G.players[p].exhausted){\n              G.players[p].exhausted = false;\n              return;\n            }\n          }\n\n        }\n      }\n    ],\n\n  },\n  见习法师: {\n    hp: 10,\n    i: 2,\n    j: 0,\n    skills: [\n      {\n        name: \"元素波动\",\n        desc: \"(限红桃和黑桃)造成2点伤害，进行1次判定，如果是红色，再造成2点伤害；如果是黑色，重置自己\",\n        effect(G, ctx, card){\n          if ([\"h\", \"s\"].includes(card[1])){\n            let damage = 2;\n            let judge = get_random_card(ctx);\n            if ([\"d\", \"h\"].includes(judge[1])){\n              damage += 2;\n            }\n            else{\n              G.players.见习法师.exhausted = false;\n            }\n            G.bossHP -= damage;\n          }\n\n        }\n\n      }\n    ]\n\n  },\n  刺客: {\n    hp: 10,\n    i: 2,\n    j: 2,\n    skills:[\n      {\n        name: \"快速攻击\",\n        desc: \"造成2点伤害，如果使用的牌点数在2-5之间，则重置自己\",\n        effect(G, ctx, card){\n          let damage = 2;\n          if ([2,3,4,5].includes(card[0])){\n            G.players.刺客.exhausted = false;\n          }\n          G.bossHP -= damage;\n        }\n      },\n      {\n        name: \"疾跑\",\n        desc: \"(限高牌)检索2张点数为2到5的牌\",\n        effect(G, ctx, card){\n          if([\"J\", \"Q\", \"K\", \"A\"].includes(card[0])){\n          for(let i=0;i<2;i++){\n            G.hand.push([ctx.random.Shuffle([2,3,4,5])[0], ctx.random.Shuffle([\"c\", \"d\", \"h\", \"s\"])[0]]);}\n          }\n        }\n      }\n    ]\n\n  },\n}\n\n\nconst PokerDungeons = {\n  setup: (ctx) => {\n    let G = {};\n\n    G.bossHP = 100;\n\n    G.players = Players;\n    for (let p in G.players){\n      G.players[p].exhausted = false;\n    }\n\n    G.hand = [];\n    for (let i=0; i<5; i++){\n      G.hand.push(get_random_card(ctx));\n    }\n\n    G.messages = [\"游戏玩法：目标是击败Boss(Boss的血量在页面上方)。点击人物头像以查看人物技能，人物发动技能需要消耗1张扑克牌，选择要用的扑克牌，然后选择相应的人物和技能，即可发动技能，规划好手牌的使用是胜利的关键！\"];\n\n    return G;\n  },\n\n  moves: {\n    useSkill(G, ctx, cardIndex, playerIndex, skillIndex){\n      if (!(G.players[playerIndex].exhausted || G.players[playerIndex].hp <= 0)){\n        let card = G.hand.splice(cardIndex, 1)[0];\n        G.players[playerIndex].exhausted = true;\n\n        G.players[playerIndex].skills[skillIndex].effect(G, ctx, card);\n\n        G.messages.unshift(playerIndex+\"用\"+card[0]+card[1]+\"触发了 \"+G.players[playerIndex].skills[skillIndex].name+\" 技能\");\n      }\n      else{\n        G.messages.unshift(\"该人物被横置或已被击败，无法使用\");\n      }\n\n    },\n\n  },\n\n  turn: {\n    onEnd(G, ctx){\n      if (G.bossHP <= 0){\n        alert(\"你赢了！\");\n      }\n\n      for (let p in G.players){\n        G.players[p].exhausted = false;\n      }\n\n      G.hand = [];\n      for (let i=0; i<5; i++){\n          G.hand.push(get_random_card(ctx));\n        }\n\n      boss_move(G, ctx);\n      \n\n    },\n  }\n\n};\n\nclass BossBoard extends React.Component{\n\n  render() {\n    return (\n      <div className=\"boss-board\">\n        <p style={{color:this.props.bossHP<=30?\"red\":\"black\"}}>Boss HP: {this.props.bossHP}</p>\n      </div>\n    )\n  }\n}\n\nclass PlayerCell extends React.Component{\n\n  render() {\n    let player = undefined;\n\n    for (let p in this.props.players){\n      if (this.props.players[p].i == this.props.i && this.props.players[p].j == this.props.j){\n        player = {\n          name: p,\n          ...this.props.players[p]\n        };\n      }\n    }\n    return player?(\n      <div \n      className=\"player-cell\" \n      style={{borderColor: (player.exhausted || player.hp <= 0)?\"#FF0000\":\"#000000\"}}\n      onClick={()=>{\n        let contents = \"\";\n        for (let skill of player.skills){\n          console.log(skill);\n          contents += \"• \";\n          contents += skill.name;\n          contents += \":\";\n          contents += skill.desc;\n          contents += \"\\n\";\n        }\n        alert(contents);\n      }}\n      >\n        <p>{player.name}</p>\n        <p>HP: {player.hp}</p>\n      </div>\n    ):\n    (\n      <div className=\"player-cell\"></div>\n    )\n  }\n}\n\nclass Controller extends React.Component{\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current_branch: \"main\",\n      previous_branch: \"main\",\n    };\n\n    this.action = {};\n\n    this.set_branch = this.set_branch.bind(this); // Use the quickest developming method\n  }\n\n  set_branch(branch) {\n    this.setState({\n        previous_branch: this.state.current_branch,\n        current_branch: branch,\n    });\n}\n\n  render() { //TODO: reconstruct this module\n    if (this.state.current_branch == \"main\"){\n      return (<div className=\"controller-row\">{this.props.hand.map(\n        (card, idx) => (\n            <button\n            onClick={() => {\n              this.action.card = idx;\n              this.set_branch(\"player\");\n            }}>\n            {card[0]}<img \n            src={\"https://www.bridgebum.com/\"+card[1]+\".gif\"}\n            style={{height:\"20px\",}}\n            ></img>\n            </button>\n        )\n      )}</div>)\n    }\n\n    else if (this.state.current_branch == \"player\"){\n      return (\n        <div>\n          {Object.keys(this.props.players).map(\n            (p) => (\n              <button onClick={() => {\n                this.action.player = p;\n                //this.props.execute(this.state.card, this.state.player);\n                this.set_branch(\"skills\");\n              }}>\n              {p}\n              </button> \n            )\n          )}\n        </div>\n      )\n    }\n\n    else if (this.state.current_branch == \"skills\"){\n      return (\n        <div>\n          {this.props.players[this.action.player].skills.map(\n            (skill, idx) => (\n              <button \n              onClick={() => {\n                this.action.skill = idx;\n                this.props.execute(this.action.card, this.action.player, this.action.skill);\n                this.set_branch(\"main\");\n              }}>\n              {skill.name}\n              </button> \n            )\n          )}\n        </div>\n      );\n    }\n  }\n\n\n\n\n}\n\n\nclass Board extends React.Component{\n\n  render() {\n    let tbody = [];\n\n    for (let i = 0; i < 3; i++) {\n      let cells = [];\n      for (let j = 0; j < 3; j++) {\n        cells.push(\n          <td>\n            <PlayerCell i={i} j={j} players={this.props.G.players} />\n          </td>\n        );\n      }\n      tbody.push(<tr>{cells}</tr>);\n    }\n\n    return(\n    <div>\n      <BossBoard bossHP={this.props.G.bossHP}/>\n      <table><tbody>{tbody}</tbody></table>\n      <div \n      className=\"message-block\"\n      onClick={() => {\n        let contents = \"\";\n        for(let i=0;i<Math.min(5,this.props.G.messages.length);i++)contents += \"• \" + this.props.G.messages[i] + \"\\n\";\n        alert(contents);\n      }}\n      >{this.props.G.messages[0]}</div>\n      <Controller \n      players={this.props.G.players} \n      hand={this.props.G.hand}\n      execute={this.props.moves.useSkill}\n      />\n      <button \n      className=\"controller-button\"\n      onClick={this.props.events.endTurn}\n      >结束回合</button>\n    </div>\n    );\n\n  }\n\n}\n\n\nconst App = Client({\n  game: PokerDungeons,\n  numPlayers: 1,\n  board: Board,\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}