{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","get_random_card","ctx","random","Shuffle","Players","Warrior","hp","i","j","skills","name","desc","effect","G","card","damage","includes","bossHP","hand","push","Militia","Medic","cured_player","players","lowest_hp","p","Object","keys","exhausted","JuniorMage","judge","Assassin","PokerDungeons","setup","moves","useSkill","cardIndex","playerIndex","skillIndex","splice","turn","onEnd","actions","pop","boss_move","BossBoard","className","this","props","React","Component","PlayerCell","player","undefined","style","borderColor","onClick","contents","skill","console","log","alert","Controller","state","current_branch","previous_branch","action","set_branch","bind","branch","setState","map","idx","src","height","execute","Board","tbody","cells","events","endTurn","App","Client","game","numPlayers","board","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6250ab4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Client } from 'boardgame.io/react';\nimport { PluginPlayer } from 'boardgame.io/plugins'\n\nvar SUIT_IMGS = [];\n\nfunction get_random_card(ctx){\n  let cards = [2,3,4,5,6,7,8,9,\"T\",\"J\",\"Q\",\"K\",\"A\"];\n  let suits = [\"c\", \"d\", \"h\", \"s\"];\n  return [ctx.random.Shuffle(cards)[0], ctx.random.Shuffle(suits)[0]];\n}\n\nfunction boss_move(G, ctx){\n  let actions = [\n  // Single damage\n  (G,ctx) => {G.players[ctx.random.Shuffle(Object.keys(G.players))[0]].hp -= 6;},\n  // AOE\n  (G,ctx) => {for (let p in G.players) G.players[p].hp -= 3;},\n  // Drop cards\n  (G,ctx) => {for (let i=0;i<2;i++) G.hand.pop();},\n  // Exhaust\n  (G,ctx) => {for (let i=0;i<2;i++) G.players[ctx.random.Shuffle(Object.keys(G.players))[0]].exhausted=true;}\n  ];\n\n  ctx.random.Shuffle(actions)[0](G, ctx);\n}\n\n// Warrior, Militia, Medic, Mage, Assassin\n\nconst Players = {\n  Warrior: {\n    hp: 15,\n    i: 0,\n    j: 1,\n    skills:[\n      {\n        name: \"普通攻击\",\n        desc: \"造成2点伤害，如果使用的是高牌，则伤害+2\",\n        effect(G, ctx, card){\n          let damage = 2;\n          if ([\"J\", \"Q\", \"K\", \"A\"].includes(card[0])){\n            damage += 2;\n          }\n          G.bossHP -= damage;\n        }\n      },\n      {\n        name: \"力量召唤\",\n        desc: \"检索1张高牌\",\n        effect(G, ctx, card){\n          G.hand.push([ctx.random.Shuffle([\"J\", \"Q\", \"K\", \"A\"])[0], ctx.random.Shuffle([\"c\", \"d\", \"h\", \"s\"][0])]);\n        }\n      }\n    ]\n\n  },\n  Militia: {\n    hp: 12,\n    i: 1,\n    j: 0,\n    skills:[\n      {\n        name: \"普通攻击\",\n        desc: \"造成2点伤害，如果使用的是高牌，则伤害+2\",\n        effect(G, ctx, card){\n          let damage = 2;\n          if ([\"J\", \"Q\", \"K\", \"A\"].includes(card[0])){\n            damage += 2;\n          }\n          G.bossHP -= damage;\n        }\n      },\n      {\n        name: \"鼓舞\",\n        desc: \"(限草花和方片)摸2张牌\",\n        effect(G, ctx, card){\n          if ([\"c\", \"d\"].includes(card[1])){\n            for (let i=0; i<2; i++) G.hand.push(get_random_card(ctx));\n          }\n        }\n      }\n    ],\n\n  },\n  Medic: {\n    hp: 10,\n    i: 1,\n    j: 2,\n    skills: [\n      {\n        name: \"治疗\",\n        desc: \"治疗血量最低的队友3点血量\",\n        effect(G, ctx, card){\n          let cured_player = G.players.Warrior; // TODO: change this\n          let lowest_hp = 1000;\n          for (let p in G.players){\n            if (G.players[p].hp < lowest_hp){\n              lowest_hp = G.players[p].hp\n              cured_player = p;\n            }\n            \n          }\n\n          cured_player.hp += 3;\n        }\n      },\n      {\n        name: \"兴奋剂\",\n        desc: \"重置1个队友\",\n        effect(G, ctx, card){\n          for (let p of Object.keys(G.players)){\n            if (G.players[p].exhausted){\n              G.players[p].exhausted = false;\n              return;\n            }\n          }\n\n        }\n      }\n    ],\n\n  },\n  JuniorMage: {\n    hp: 10,\n    i: 2,\n    j: 0,\n    skills: [\n      {\n        name: \"元素波动\",\n        desc: \"(限红桃和黑桃)造成2点伤害，进行1次判定，如果是红色，再造成2点伤害；如果是黑色，重置自己\",\n        effect(G, ctx, card){\n          if ([\"h\", \"s\"].includes(card[1])){\n            let damage = 2;\n            let judge = get_random_card(ctx);\n            if ([\"d\", \"h\"].includes(judge[1])){\n              damage += 2;\n            }\n            else{\n              G.players.JuniorMage.exhausted = false;\n            }\n            G.hp.bossHP -= damage;\n          }\n\n        }\n\n      }\n    ]\n\n  },\n  Assassin: {\n    hp: 10,\n    i: 2,\n    j: 2,\n    skills:[\n      {\n        name: \"快速攻击\",\n        desc: \"造成2点伤害，如果使用的牌点数在2-5之间，则重置自己\",\n        effect(G, ctx, card){\n          let damage = 2;\n          if ([\"2\", \"3\", \"4\", \"5\"].includes(card[0])){\n            G.players.Assassin.exhausted = false;\n          }\n          G.bossHP -= damage;\n        }\n      },\n      {\n        name: \"疾跑\",\n        desc: \"(限高牌)检索2张点数为2到5的牌\",\n        effect(G, ctx, card){\n          for(let i=0;i<2;i++){G.hand.push([ctx.random.Shuffle([\"2\", \"3\", \"4\", \"5\"])[0], ctx.random.Shuffle([\"c\", \"d\", \"h\", \"s\"][0])]);}\n        }\n      }\n    ]\n\n  },\n}\n\n\nconst PokerDungeons = {\n  setup: (ctx) => {\n    let G = {};\n\n    G.bossHP = 20;\n\n    G.players = Players;\n    for (let p in G.players){\n      G.players[p].exhausted = false;\n    }\n\n    G.hand = [];\n    for (let i=0; i<5; i++){\n      G.hand.push(get_random_card(ctx));\n    }\n\n    return G;\n  },\n\n  moves: {\n    useSkill(G, ctx, cardIndex, playerIndex, skillIndex){\n      if (!(G.players[playerIndex].exhausted || G.players[playerIndex].hp <= 0)){\n        let card = G.hand.splice(cardIndex, 1)[0];\n        G.players[playerIndex].exhausted = true;\n\n        G.players[playerIndex].skills[skillIndex].effect(G, ctx, card);\n      }\n\n    },\n\n  },\n\n  turn: {\n    onEnd(G, ctx){\n      for (let p in G.players){\n        G.players[p].exhausted = false;\n      }\n\n      G.hand = [];\n      for (let i=0; i<5; i++){\n          G.hand.push(get_random_card(ctx));\n        }\n\n      boss_move(G, ctx);\n      \n\n    },\n  }\n\n};\n\nclass BossBoard extends React.Component{\n\n  render() {\n    return (\n      <div className=\"boss-board\">\n        <p>Boss HP: {this.props.bossHP}</p>\n      </div>\n    )\n  }\n}\n\nclass PlayerCell extends React.Component{\n\n  render() {\n    let player = undefined;\n\n    for (let p in this.props.players){\n      if (this.props.players[p].i == this.props.i && this.props.players[p].j == this.props.j){\n        player = {\n          name: p,\n          ...this.props.players[p]\n        };\n      }\n    }\n    return player?(\n      <div \n      className=\"player-cell\" \n      style={{borderColor: player.exhausted?\"#FF0000\":\"#000000\"}}\n      onClick={()=>{\n        let contents = \"\";\n        for (let skill of player.skills){\n          console.log(skill);\n          contents += skill.name;\n          contents += \":\";\n          contents += skill.desc;\n          contents += \"\\n\";\n        }\n        alert(contents);\n      }}\n      >\n        <p>{player.name}</p>\n        <p>HP: {player.hp}</p>\n      </div>\n    ):\n    (\n      <div className=\"player-cell\"></div>\n    )\n  }\n}\n\nclass Controller extends React.Component{\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current_branch: \"main\",\n      previous_branch: \"main\",\n    };\n\n    this.action = {};\n\n    this.set_branch = this.set_branch.bind(this); // Use the quickest developming method\n  }\n\n  set_branch(branch) {\n    this.setState({\n        previous_branch: this.state.current_branch,\n        current_branch: branch,\n    });\n}\n\n  render() { //TODO: reconstruct this module\n    if (this.state.current_branch == \"main\"){\n      return (<div className=\"controller-row\">{this.props.hand.map(\n        (card, idx) => (\n            <button\n            onClick={() => {\n              this.action.card = idx;\n              this.set_branch(\"player\");\n            }}>\n            {card[0]}<img \n            src={\"https://www.bridgebum.com/\"+card[1]+\".gif\"}\n            style={{height:\"20px\",}}\n            ></img>\n            </button>\n        )\n      )}</div>)\n    }\n\n    else if (this.state.current_branch == \"player\"){\n      return (\n        <div>\n          {Object.keys(this.props.players).map(\n            (p) => (\n              <button onClick={() => {\n                this.action.player = p;\n                //this.props.execute(this.state.card, this.state.player);\n                this.set_branch(\"skills\");\n              }}>\n              {p}\n              </button> \n            )\n          )}\n        </div>\n      )\n    }\n\n    else if (this.state.current_branch == \"skills\"){\n      return (\n        <div>\n          {this.props.players[this.action.player].skills.map(\n            (skill, idx) => (\n              <button \n              onClick={() => {\n                this.action.skill = idx;\n                this.props.execute(this.action.card, this.action.player, this.action.skill);\n                this.set_branch(\"main\");\n              }}>\n              {skill.name}\n              </button> \n            )\n          )}\n        </div>\n      );\n    }\n  }\n\n\n\n\n}\n\n\nclass Board extends React.Component{\n\n  render() {\n    let tbody = [];\n\n    for (let i = 0; i < 3; i++) {\n      let cells = [];\n      for (let j = 0; j < 3; j++) {\n        cells.push(\n          <td>\n            <PlayerCell i={i} j={j} players={this.props.G.players} />\n          </td>\n        );\n      }\n      tbody.push(<tr>{cells}</tr>);\n    }\n\n    return(\n    <div>\n      <BossBoard bossHP={this.props.G.bossHP}/>\n      <table><tbody>{tbody}</tbody></table>\n      <Controller \n      players={this.props.G.players} \n      hand={this.props.G.hand}\n      execute={this.props.moves.useSkill}\n      />\n      <button \n      className=\"controller-button\"\n      onClick={this.props.events.endTurn}\n      >结束回合</button>\n    </div>\n    );\n\n  }\n\n}\n\n\nconst App = Client({\n  game: PokerDungeons,\n  numPlayers: 1,\n  board: Board,\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}